name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup SSH key
        run: |
          echo "${{ secrets.EC2_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: Deploy to EC2
        run: |
          ssh -T -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -euo pipefail

            cd ~/app || mkdir -p ~/app && cd ~/app

            # Clean workspace (be careful: this deletes files inside ~/app)
            rm -rf ./* .[!.]* || true

            # Fetch fresh copy
            git clone --depth 1 https://github.com/SujalKrG/demoAuthEva.git temp
            cp -a temp/. .
            rm -rf temp
            rm -rf .git || true

            # Ensure node & npm exist
            if ! command -v node >/dev/null 2>&1; then
              echo "ERROR: node not found on remote. Install Node.js on the EC2 instance first."
              exit 1
            fi

            # Ensure pm2 is installed (install globally if missing)
            if ! command -v pm2 >/dev/null 2>&1; then
              npm install -g pm2
            fi

            # Install dependencies (change to npm ci if you prefer reproducible installs)
            npm install

            # Export secrets into this remote session (these are expanded by Actions before sending)
            export DB_HOST="${{ secrets.DB_HOST }}"
            export DB_USER="${{ secrets.DB_USER }}"
            export DB_PASS="${{ secrets.DB_PASS }}"
            export DB_NAME="${{ secrets.DB_NAME }}"
            export DB_PORT="${{ secrets.DB_PORT }}"
            export NODE_ENV=production
            export PORT=8080

            # Compatibility aliases
            export DB_USERNAME="$DB_USER"
            export DB_PASSWORD="$DB_PASS"

            # Basic validation
            if [ -z "$DB_HOST" ] || [ -z "$DB_USER" ] || [ -z "$DB_PASS" ] || [ -z "$DB_NAME" ]; then
              echo "ERROR: Missing DB env vars. Aborting deploy."
              echo "DB_HOST empty? $([ -z \"$DB_HOST\" ] && echo yes || echo no)"
              echo "DB_USER empty? $([ -z \"$DB_USER\" ] && echo yes || echo no)"
              echo "DB_PASS empty? $([ -z \"$DB_PASS\" ] && echo yes || echo no)"
              echo "DB_NAME empty? $([ -z \"$DB_NAME\" ] && echo yes || echo no)"
              exit 1
            fi

            # Optional: run migrations/seeders if you have scripts
            # npm run migrate:run || true
            # npm run seed:run || true

            # Restart application with pm2 (use --update-env so pm2 picks up exported envs)
            pm2 stop myapp || true
            pm2 delete myapp || true
            pm2 start server.js --name myapp --update-env

            # Show pm2 status for debugging
            pm2 status
          EOF
